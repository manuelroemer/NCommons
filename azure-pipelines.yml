trigger:
- master

name: $(SourceBranchName)_$(Date:yyyy-MM-dd)_$(Rev:.r)

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  releaseVersion: '1.0.778'

steps:
- task: DotNetCoreInstaller@0
  displayName: Install .NET Core 3.0 Preview
  inputs:
    packageType: 'sdk'
    version: '3.0.100-preview3-010431'

- script: dotnet build src -c $(buildConfiguration) -p:Version=$(releaseVersion) -v detailed
  displayName: Build

- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
  condition: succeeded()

- script: dotnet pack src --no-build --output $(Build.ArtifactStagingDirectory) -c $(buildConfiguration) -p:PackageVersion=$(releaseVersion)
  displayName: NuGet - Pack Projects
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      eq(variables['system.pullrequest.isfork'], false)
    )

- task: NuGetCommand@2
  displayName: NuGet - Pack Metapackage
  inputs:
    command: pack
    packagesToPack: src/NCommons/NCommons.nuspec
    packDestination: $(Build.ArtifactStagingDirectory)
    versioningScheme: byEnvVar
    versionEnvVar: releaseVersion
    buildProperties: 'releaseVersion=$(releaseVersion)'
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      eq(variables['system.pullrequest.isfork'], false)
    )

# - task: NuGetCommand@2
#   displayName: NuGet - Publish Packages
#   inputs:
#     command: push
#     nuGetFeedType: external
#     publishFeedCredentials: 'NuGet.org'
#     versioningScheme: off
#   condition: |
#     and
#     (
#       succeeded(),
#       eq(variables['Build.SourceBranch'], 'refs/heads/master'),
#       eq(variables['system.pullrequest.isfork'], false)
#     )

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: 'NuGet Packages'
 