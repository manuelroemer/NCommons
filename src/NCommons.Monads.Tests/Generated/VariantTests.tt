<#
    // Recommendation:
    // Don't edit this file in Visual Studio. Download VS Code and this extension:
    // https://marketplace.visualstudio.com/items?itemName=zbecknell.t4-support
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file=".\..\CodeGen\Generics.tt" #>
<#@ include file=".\..\CodeGen\Ordinals.tt" #>
<#
const int From = 1;
const int To = 8;
#>
// This code has been auto-generated by the associated .tt file.
// Any changes made to in this file will be lost when the file is regenerated.

namespace NCommons.Monads.Tests
{
    using System;
    using Xunit;

<#
for (var currentTo = From; currentTo <= To; currentTo++) {
#>

    public class Variant<#=T(currentTo)#>Tests
    {

        public class EmptyTests
        {
            
            [Fact]
            public void Is_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.True(v.IsEmpty);
            }

        }

        public class ConstructorTests
        {
        
            [Fact]
            public void Default_Initializes_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.True(v.IsEmpty);
            }

<#
    for (var i = From; i <= currentTo; i++) {
#>
            [Fact]
            public void Value<#=i#>_Initializes_Value<#=i#>_Variant()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i#>());
                Assert.True(v.IsValue<#=i#>);
            }

<#
    }
#>
        }

        public class IsEmptyTests
        {

            [Fact]
            public void Returns_True_For_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.True(v.IsEmpty);
            }

            [Fact]
            public void Returns_False_For_Non_Empty_Variant()
            {
                var v = new <#=Variant(currentTo)#>(new Obj1());
                Assert.False(v.IsEmpty);
            }

        }

<#
    for (var i = From; i <= currentTo; i++) {
#>
        public class IsValue<#=i#>Tests
        {

            [Fact]
            public void Returns_True_If_Variant_Holds_That_Value()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i#>());
                Assert.True(v.IsValue<#=i#>);
            }

            [Fact]
            public void Returns_False_If_Variant_Holds_Other_Value()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.False(v.IsValue<#=i#>);
            }

        }

<#
    }
#>
<#
    for (var i = From; i <= currentTo; i++) {
#>
        public class Value<#=i#>Tests
        {

            [Fact]
            public void Returns_Non_Empty_Optional_With_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                var opt = v.Value<#=i#>;
                Assert.True(opt.HasValue);
                Assert.Same(value, opt.GetValue());
            }

            [Fact]
            public void Returns_Empty_Optional_If_Variant_Holds_Other_Value()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                var opt = v.Value<#=i#>;
                Assert.False(opt.HasValue);
            }

        }

<#
    }
#>
        public class ValueTests
        {
            
            [Fact]
            public void Returns_Non_Empty_Optional_With_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj1();
                var v = new <#=Variant(currentTo)#>(value);
                var opt = v.Value;
                Assert.True(opt.HasValue);
                Assert.Same(value, opt.GetValue());
            }

            [Fact]
            public void Returns_Empty_Optional_If_Variant_Is_Empty()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                var opt = v.Value;
                Assert.False(opt.HasValue);
            }

        }

<#
    for (var i = From; i <= currentTo; i++) {
#>
        public class GetValue<#=i#>Tests
        {

            [Fact]
            public void Returns_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                Assert.Same(value, v.GetValue<#=i#>());
            }

            [Fact]
            public void Throws_InvalidOperationException_For_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Throws<InvalidOperationException>(() => v.GetValue<#=i#>());
            }

<#
        if (currentTo > 1) {
#>
            [Fact]
            public void Throws_InvalidOperationException_If_Variant_Holds_Other_Value()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i == 1 ? 2 : 1#>());
                Assert.Throws<InvalidOperationException>(() => v.GetValue<#=i == 1 ? 1 : 2#>());
            }

<#
        }
#>
        }

<#
    }
#>
<#
    for (var i = From; i <= currentTo; i++) {
#>
        public class GetValue<#=i#>OrDefaultTests
        {

            [Fact]
            public void Returns_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                Assert.Same(value, v.GetValue<#=i#>OrDefault());
            }

            [Fact]
            public void Returns_Default_Value_For_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Null(v.GetValue<#=i#>OrDefault());
            }

<#
        if (currentTo > 1) {
#>
            [Fact]
            public void Returns_Default_Value_If_Variant_Holds_Other_Value()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i == 1 ? 2 : 1#>());
                Assert.Null(v.GetValue<#=i == 1 ? 1 : 2#>OrDefault());
            }

<#
        }
#>
        }

<#
    }
#>
<#
    for (var i = From; i <= currentTo; i++) {
#>
        public class GetValue<#=i#>OrTests
        {

            [Fact]
            public void SubstituteProvider_Throws_ArgumentNullException()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Throws<ArgumentNullException>(() => v.GetValue<#=i#>Or((Func<Obj<#=i#>>)null!));
            }

            [Fact]
            public void Substitute_Returns_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                Assert.Same(value, v.GetValue<#=i#>Or(new Obj<#=i#>()));
            }

            [Fact]
            public void SubstituteProvider_Returns_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                Assert.Same(value, v.GetValue<#=i#>Or(() => new Obj<#=i#>()));
            }

            [Fact]
            public void Substitute_Returns_Default_Value_For_Empty_Variant()
            {
                var substitute = new Obj<#=i#>();
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Same(substitute, v.GetValue<#=i#>Or(substitute));
            }

            [Fact]
            public void SubstituteProvider_Returns_Default_Value_For_Empty_Variant()
            {
                var substitute = new Obj<#=i#>();
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Same(substitute, v.GetValue<#=i#>Or(() => substitute));
            }

<#
        if (currentTo > 1) {
#>
            [Fact]
            public void Substitute_Returns_Default_Value_If_Variant_Holds_Other_Value()
            {
                var substitute = new Obj<#=i == 1 ? 1 : 2#>();
                var v = new <#=Variant(currentTo)#>(new Obj<#=i == 1 ? 2 : 1#>());
                Assert.Same(substitute, v.GetValue<#=i == 1 ? 1 : 2#>Or(substitute));
            }

            [Fact]
            public void SubstituteProvider_Returns_Default_Value_If_Variant_Holds_Other_Value()
            {
                var substitute = new Obj<#=i == 1 ? 1 : 2#>();
                var v = new <#=Variant(currentTo)#>(new Obj<#=i == 1 ? 2 : 1#>());
                Assert.Same(substitute, v.GetValue<#=i == 1 ? 1 : 2#>Or(() => substitute));
            }

<#
        }
#>
        }

<#
    }
#>
<#
    for (var i = From; i <= currentTo; i++) {
#>
        public class TryGetValue<#=i#>OrDefaultTests
        {

            [Fact]
            public void Returns_True_And_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                var result = v.TryGetValue<#=i#>(out var retrievedValue);
                Assert.True(result);
                Assert.Same(value, retrievedValue);
            }

            [Fact]
            public void Returns_False_For_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                var result = v.TryGetValue<#=i#>(out var retrievedValue);
                Assert.False(result);
                Assert.Null(retrievedValue);
            }

<#
        if (currentTo > 1) {
#>
            [Fact]
            public void Returns_False_If_Variant_Holds_Other_Value()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i == 1 ? 2 : 1#>());
                var result = v.TryGetValue<#=i#>(out var retrievedValue);
                Assert.False(result);
                Assert.Null(retrievedValue);
            }

<#
        }
#>
        }

<#
    }
#>

        public class MatchTests
        {

            [Fact]
            public void Void_Throws_ArgumentNullException()
            {
                var v = <#=Variant(currentTo)#>.Empty;
<#
    for (var i = From; i <= currentTo; i++) {
#>
                Assert.Throws<ArgumentNullException>(() => v.Match(<#=string.Join(", ", FromTo(From, currentTo).Select(j => j == i ? "null!" : "_ => { }"))#>, () => { }));
<#
    }
#>
                Assert.Throws<ArgumentNullException>(() => v.Match(<#=TList(currentTo, "_ => {{ }}")#>, null!));
            }

            [Fact]
            public void TResult_Throws_ArgumentNullException()
            {
                var v = <#=Variant(currentTo)#>.Empty;
<#
    for (var i = From; i <= currentTo; i++) {
#>
                Assert.Throws<ArgumentNullException>(() => v.Match<int>(<#=string.Join(", ", FromTo(From, currentTo).Select(j => j == i ? "null!" : "_ => 1"))#>, () => 1));
<#
    }
#>
                Assert.Throws<ArgumentNullException>(() => v.Match<int>(<#=TList(currentTo, "_ => 1")#>, null!));
            }

<#
    for (var i = From; i <= currentTo; i++) {
#>
            
            [Fact]
            public void Void_Matches_Value<#=i#>()
            {
                var matchedValue = -1;
                var v = new <#=Variant(currentTo)#>(new Obj<#=i#>());
                v.Match(
<#
    for (var j = From; j <= currentTo; j++) {
#>
                    _ => matchedValue = <#=j#>,
<#
    }
#>
                    () => matchedValue = 0
                );

                Assert.Equal(<#=i#>, matchedValue);
            }
            
            [Fact]
            public void TResult_Matches_Value<#=i#>()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i#>());
                var matchedValue = v.Match(
<#
    for (var j = From; j <= currentTo; j++) {
#>
                    _ => <#=j#>,
<#
    }
#>
                    () => 0
                );

                Assert.Equal(<#=i#>, matchedValue);
            }

<#
    }
#>

            [Fact]
            public void Void_Matches_Empty_Variant()
            {
                var matchedValue = -1;
                var v = <#=Variant(currentTo)#>.Empty;
                v.Match(
<#
    for (var i = From; i <= currentTo; i++) {
#>
                    _ => matchedValue = <#=i#>,
<#
    }
#>
                    () => matchedValue = 0
                );

                Assert.Equal(0, matchedValue);
            }

            [Fact]
            public void TResult_Matches_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                var matchedValue = v.Match(
<#
    for (var i = From; i <= currentTo; i++) {
#>
                    _ => <#=i#>,
<#
    }
#>
                    () => 0
                );

                Assert.Equal(0, matchedValue);
            }

        }

        public class EqualityTests
        {
        
            public static TheoryData<<#=Variant(currentTo)#>, <#=Variant(currentTo)#>> EqualVariantsData
            {
                get
                {
                    var data = new TheoryData<<#=Variant(currentTo)#>, <#=Variant(currentTo)#>>()
                    {
                        { <#=Variant(currentTo)#>.Empty, <#=Variant(currentTo)#>.Empty },
                    };

                    // Same instances.
<#
    for (var i = From; i <= currentTo; i++) {
#>
                    var obj<#=i#> = new Obj<#=i#>();
                    data.Add(new <#=Variant(currentTo)#>(obj<#=i#>), new <#=Variant(currentTo)#>(obj<#=i#>));

<#
    }
#>
                    return data;
                }
            }
        
            public static TheoryData<<#=Variant(currentTo)#>, <#=Variant(currentTo)#>> UnequalVariantsData => new TheoryData<<#=Variant(currentTo)#>, <#=Variant(currentTo)#>>()
            {
<#
    for (var i = From; i <= currentTo; i++) {
#>
                { new <#=Variant(currentTo)#>(new Obj<#=i#>()), <#=Variant(currentTo)#>.Empty },
                { new <#=Variant(currentTo)#>(new Obj<#=i#>()), new <#=Variant(currentTo)#>(new Obj<#=i#>()) }, // Different instance of same value.
<#
    }
#>
            };

            [Theory, MemberData(nameof(EqualVariantsData))]
            public void Variant_Equality(<#=Variant(currentTo)#> left, <#=Variant(currentTo)#> right)
            {
                Assert.True(left.Equals((object)right));
                Assert.True(((IEquatable<<#=Variant(currentTo)#>>)left).Equals(right));
                Assert.True(left.Equals(right));
                Assert.True(left == right);
                Assert.False(left != right);
                Assert.Equal(left.GetHashCode(), right.GetHashCode());
            }

            [Theory, MemberData(nameof(UnequalVariantsData))]
            public void Variant_Inequality(<#=Variant(currentTo)#> left, <#=Variant(currentTo)#> right)
            {
                Assert.False(left.Equals((object)right));
                Assert.False(((IEquatable<<#=Variant(currentTo)#>>)left).Equals(right));
                Assert.False(left.Equals(right));
                Assert.False(left == right);
                Assert.True(left != right);
                Assert.NotEqual(left.GetHashCode(), right.GetHashCode());
            }

        }

        public class ToStringTests
        {

            [Fact]
            public void Returns_Empty_String_For_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Equal(string.Empty, v.ToString());
            }
        
            [Fact]
            public void Returns_Empty_String_If_Held_Value_Is_Null()
            {
                var v = new <#=Variant(currentTo)#>((Obj1)null!);
                Assert.Equal(string.Empty, v.ToString());
            }
        
            [Fact]
            public void Returns_ToString_Of_Held_Value()
            {
                var v = new <#=Variant(currentTo)#>(new Obj1());
                Assert.Equal(new Obj1().ToString(), v.ToString());
            }

        }

<#
    if (currentTo == 1) {
#>
        public class ToOptionalTests
        {
        
            [Fact]
            public void Converts_Empty_Variant_To_Empty_Optional()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                var opt = v.ToOptional();
                Assert.False(opt.HasValue);
            }

            [Fact]
            public void Converts_Non_Empty_Optional_To_Variant_With_Same_Value()
            {
                var value = new Obj1();
                var v = new <#=Variant(currentTo)#>(value);
                var opt = v.ToOptional();
                Assert.Same(value, opt.GetValue());
            }

        }

<#
    }
#>

        public class DeconstructTests
        {

            [Fact]
            public void Correctly_Deconstructs_Components()
            {
                var v = new <#=Variant(currentTo)#>(new Obj1());
                v.Deconstruct(<#=TList(currentTo, "out var v{0}")#>);

<#
    for (var i = From; i <= currentTo; i++) {
#>
                Assert.Equal(v.Value<#=i#>, v<#=i#>);
<#
    }
#>
            }

        }

        public class ImplicitOperatorTests
        {
        
<#
    for (var i = From; i <= currentTo; i++) {
#>
            [Fact]
            public void Initializes_Variant_From_Value<#=i#>()
            {
                var value = new Obj<#=i#>();
                <#=Variant(currentTo)#> v = value;
                Assert.Same(value, v.GetValue<#=i#>());
            }
<#
    }
#>
        
        }

        public class ExplicitOperatorTests
        {
        
<#
    for (var i = From; i <= currentTo; i++) {
#>

            [Fact]
            public void <#=T(i)#>_Returns_Value_If_Variant_Holds_That_Value()
            {
                var value = new Obj<#=i#>();
                var v = new <#=Variant(currentTo)#>(value);
                Assert.Same(value, (Obj<#=i#>)v);
            }

            [Fact]
            public void <#=T(i)#>_Throws_InvalidOperationException_For_Empty_Variant()
            {
                var v = <#=Variant(currentTo)#>.Empty;
                Assert.Throws<InvalidOperationException>(() => (Obj<#=i#>)v);
            }

<#
        if (currentTo > 1) {
#>
            [Fact]
            public void <#=T(i)#>_Throws_InvalidOperationException_If_Variant_Holds_Other_Value()
            {
                var v = new <#=Variant(currentTo)#>(new Obj<#=i == 1 ? 2 : 1#>());
                Assert.Throws<InvalidOperationException>(() => (Obj<#=i == 1 ? 1 : 2#>)v);
            }

<#
        }
    }
#>

        }

    }

<#
}
#>

}

<#+
public string Variant(int to) => $"Variant{TDefinition(to, "Obj{0}")}";
#>
